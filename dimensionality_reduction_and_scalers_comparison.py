# -*- coding: utf-8 -*-
"""Копия блокнота "ИСИТ ПР2.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AVF_LaqRH3Z1VzjxTzxuBnpC4DVcQfjQ

#DATA
"""

#pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
dermatology = fetch_ucirepo(id=33)

# data (as pandas dataframes)
X = dermatology.data.features
y = dermatology.data.targets

# metadata
print(dermatology.metadata)

# variable information
print(dermatology.variables)

data = dermatology.data.features

data.head(5)

data.describe()

data.isna().sum()

data_upd = data.dropna()

y = pd.Series(y.loc[data_upd.index].squeeze()).reset_index(drop=True)

data_upd.isna().sum()

data_upd.shape

#mask = data.notna().all(axis=1)
#X_clean = data.loc[mask].copy()
#y_clean = y.loc[mask].iloc[:, 0].astype(int).to_numpy()

#X_clean.shape, y_clean.shape

#data_upd = X_clean

"""#Scalers preprocessing"""

from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler

import pandas as pd

min_max_scaler = MinMaxScaler()
standart_scaler = StandardScaler()
robust_scaler = RobustScaler()

X_mms = min_max_scaler.fit_transform(data_upd)
X_sts = standart_scaler.fit_transform(data_upd)
X_rbs = robust_scaler.fit_transform(data_upd)

X_mms = pd.DataFrame(X_mms)
X_sts = pd.DataFrame(X_sts)
X_rbs = pd.DataFrame(X_rbs)

print(X_mms.shape, X_sts.shape, X_rbs.shape)

X_mms.head(5)

X_sts.head(5)

X_rbs.head(5)

"""#Scalers comparison"""

import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib import cm
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import minmax_scale
from sklearn.preprocessing import MaxAbsScaler
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import QuantileTransformer
from sklearn.preprocessing import PowerTransformer
from sklearn.datasets import fetch_california_housing

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.cm as cm

from sklearn.preprocessing import (
    MinMaxScaler, StandardScaler, RobustScaler, minmax_scale
)

min_max_scaler = MinMaxScaler()
standart_scaler = StandardScaler()
robust_scaler = RobustScaler()

X_mms = min_max_scaler.fit_transform(data_upd.iloc[:, :2])
X_sts = standart_scaler.fit_transform(data_upd.iloc[:, :2])
X_rbs = robust_scaler.fit_transform(data_upd.iloc[:, :2])

X_mms = pd.DataFrame(X_mms, columns=["f0", "f1"])
X_sts = pd.DataFrame(X_sts, columns=["f0", "f1"])
X_rbs = pd.DataFrame(X_rbs, columns=["f0", "f1"])

color_source = data_upd.iloc[:, 0].values
y = minmax_scale(color_source)
cmap = getattr(cm, 'plasma_r', cm.hot_r)

def create_axes(title, figsize=(14, 6)):
    fig = plt.figure(figsize=figsize)
    fig.suptitle(title)
    left, width = 0.07, 0.28
    bottom, height = 0.12, 0.72
    bottom_h = height + 0.14
    left_h = left + width + 0.02
    rect_scatter = [left, bottom, width, height]
    rect_histx = [left, bottom_h, width, 0.08]
    rect_histy = [left_h, bottom, 0.04, height]
    ax_scatter = plt.axes(rect_scatter)
    ax_histx = plt.axes(rect_histx)
    ax_histy = plt.axes(rect_histy)

    left2 = left + width + 0.18
    left_h2 = left2 + width + 0.02
    rect_scatter_zoom = [left2, bottom, width, height]
    rect_histx_zoom = [left2, bottom_h, width, 0.08]
    rect_histy_zoom = [left_h2, bottom, 0.04, height]
    ax_scatter_zoom = plt.axes(rect_scatter_zoom)
    ax_histx_zoom = plt.axes(rect_histx_zoom)
    ax_histy_zoom = plt.axes(rect_histy_zoom)

    left_cb = left2 + width + 0.12
    rect_colorbar = [left_cb, bottom, 0.02, height]
    ax_colorbar = plt.axes(rect_colorbar)

    return ((ax_scatter, ax_histy, ax_histx),
            (ax_scatter_zoom, ax_histy_zoom, ax_histx_zoom),
            ax_colorbar)

def plot_distribution(axes, X_np, y_vals, hist_nbins=50, title="",
                      x0_label="", x1_label=""):
    ax, hist_X1, hist_X0 = axes
    ax.set_title(title)
    ax.set_xlabel(x0_label)
    ax.set_ylabel(x1_label)

    colors = cmap(y_vals)
    ax.scatter(X_np[:, 0], X_np[:, 1], alpha=0.6, marker='o', s=14, lw=0, c=colors)

    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()
    ax.spines['left'].set_position(('outward', 6))
    ax.spines['bottom'].set_position(('outward', 6))
    hist_X1.set_ylim(ax.get_ylim())
    hist_X1.hist(X_np[:, 1], bins=hist_nbins, orientation='horizontal', color='grey', ec='grey')
    hist_X1.axis('off')

    hist_X0.set_xlim(ax.get_xlim())
    hist_X0.hist(X_np[:, 0], bins=hist_nbins, orientation='vertical', color='grey', ec='grey')
    hist_X0.axis('off')

def make_plot_for_X(title, X_df, y_vals, show=True):
    X = np.asarray(X_df.iloc[:, :2])
    ax_zoom_out, ax_zoom_in, ax_colorbar = create_axes(title)
    axarr = (ax_zoom_out, ax_zoom_in)

    plot_distribution(axarr[0], X, y_vals, hist_nbins=200,
                      x0_label="Feature 0", x1_label="Feature 1",
                      title="Full data")

    zoom_in_percentile_range = (0, 99)
    cutoffs_X0 = np.percentile(X[:, 0], zoom_in_percentile_range)
    cutoffs_X1 = np.percentile(X[:, 1], zoom_in_percentile_range)
    non_outliers_mask = (
        np.all(X > [cutoffs_X0[0], cutoffs_X1[0]], axis=1) &
        np.all(X < [cutoffs_X0[1], cutoffs_X1[1]], axis=1)
    )
    X_zoom = X[non_outliers_mask]
    y_zoom = y_vals[non_outliers_mask]
    plot_distribution(axarr[1], X_zoom, y_zoom, hist_nbins=50,
                      x0_label="Feature 0", x1_label="Feature 1",
                      title="Zoom-in (0th-99th pct)")

    norm = mpl.colors.Normalize(vmin=0.0, vmax=1.0)
    mpl.colorbar.ColorbarBase(ax_colorbar, cmap=cmap, norm=norm, orientation='vertical',
                              label='Color mapping (0..1)')
    if show:
        plt.show()

distributions = [
    ('Data after MinMax scaling', X_mms),
    ('Data after Standard scaling', X_sts),
    ('Data after Robust scaling', X_rbs),
]

for title, Xdf in distributions:
    make_plot_for_X(title, Xdf, y)

"""#T-SNE"""

import numpy as np
from sklearn.manifold import TSNE

"""##fit"""

X_mms_embedded_0 = pd.DataFrame(TSNE(perplexity=5).fit_transform(X_mms))
X_sts_embedded_0 = pd.DataFrame(TSNE(perplexity=5).fit_transform(X_sts))
X_rbs_embedded_0 = pd.DataFrame(TSNE(perplexity=5).fit_transform(X_rbs))

X_mms_embedded_0.columns = ['0', '1']
X_sts_embedded_0.columns = ['0', '1']
X_rbs_embedded_0.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_0, y_clean, 'TSNE', 'MinMax',   'perp=5, eucl')
eval_embedding(X_sts, X_sts_embedded_0, y_clean, 'TSNE', 'Standard', 'perp=5, eucl')
eval_embedding(X_rbs, X_rbs_embedded_0, y_clean, 'TSNE', 'Robust',   'perp=5, eucl')

X_mms_embedded_1 = pd.DataFrame(TSNE().fit_transform(X_mms))
X_sts_embedded_1 = pd.DataFrame(TSNE().fit_transform(X_sts))
X_rbs_embedded_1 = pd.DataFrame(TSNE().fit_transform(X_rbs))

X_mms_embedded_1.columns = ['0', '1']
X_sts_embedded_1.columns = ['0', '1']
X_rbs_embedded_1.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_1, y_clean, 'TSNE', 'MinMax',   'perp=30, eucl')
eval_embedding(X_sts, X_sts_embedded_1, y_clean, 'TSNE', 'Standard', 'perp=30, eucl')
eval_embedding(X_rbs, X_rbs_embedded_1, y_clean, 'TSNE', 'Robust',   'perp=30, eucl')

X_mms_embedded_2 = pd.DataFrame(TSNE(perplexity=60).fit_transform(X_mms))
X_sts_embedded_2 = pd.DataFrame(TSNE(perplexity=60).fit_transform(X_sts))
X_rbs_embedded_2 = pd.DataFrame(TSNE(perplexity=60).fit_transform(X_rbs))

X_mms_embedded_2.columns = ['0', '1']
X_sts_embedded_2.columns = ['0', '1']
X_rbs_embedded_2.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_2, y_clean, 'TSNE', 'MinMax',   'perp=60, eucl')
eval_embedding(X_sts, X_sts_embedded_2, y_clean, 'TSNE', 'Standard', 'perp=60, eucl')
eval_embedding(X_rbs, X_rbs_embedded_2, y_clean, 'TSNE', 'Robust',   'perp=60, eucl')

X_mms_embedded_3 = pd.DataFrame(TSNE(metric='cosine').fit_transform(X_mms))
X_sts_embedded_3 = pd.DataFrame(TSNE(metric='cosine').fit_transform(X_sts))
X_rbs_embedded_3 = pd.DataFrame(TSNE(metric='cosine').fit_transform(X_rbs))

X_mms_embedded_3.columns = ['0', '1']
X_sts_embedded_3.columns = ['0', '1']
X_rbs_embedded_3.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_3, y_clean, 'TSNE', 'MinMax',   'perp=30, cos')
eval_embedding(X_sts, X_sts_embedded_3, y_clean, 'TSNE', 'Standard', 'perp=30, cos')
eval_embedding(X_rbs, X_rbs_embedded_3, y_clean, 'TSNE', 'Robust',   'perp=30, cos')

X_mms_embedded_4 = pd.DataFrame(TSNE(metric='manhattan').fit_transform(X_mms))
X_sts_embedded_4 = pd.DataFrame(TSNE(metric='manhattan').fit_transform(X_sts))
X_rbs_embedded_4 = pd.DataFrame(TSNE(metric='manhattan').fit_transform(X_rbs))

X_mms_embedded_4.columns = ['0', '1']
X_sts_embedded_4.columns = ['0', '1']
X_rbs_embedded_4.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_4, y_clean, 'TSNE', 'MinMax',   'perp=30, mh')
eval_embedding(X_sts, X_sts_embedded_4, y_clean, 'TSNE', 'Standard', 'perp=30, mh')
eval_embedding(X_rbs, X_rbs_embedded_4, y_clean, 'TSNE', 'Robust',   'perp=30, mh')

X_mms_embedded_5 = pd.DataFrame(TSNE(metric='correlation').fit_transform(X_mms))
X_sts_embedded_5 = pd.DataFrame(TSNE(metric='correlation').fit_transform(X_sts))
X_rbs_embedded_5 = pd.DataFrame(TSNE(metric='correlation').fit_transform(X_rbs))

X_mms_embedded_5.columns = ['0', '1']
X_sts_embedded_5.columns = ['0', '1']
X_rbs_embedded_5.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_5, y_clean, 'TSNE', 'MinMax',   'perp=30, corr')
eval_embedding(X_sts, X_sts_embedded_5, y_clean, 'TSNE', 'Standard', 'perp=30, corr')
eval_embedding(X_rbs, X_rbs_embedded_5, y_clean, 'TSNE', 'Robust',   'perp=30, corr')

"""##visualization"""

import seaborn as sns
import matplotlib.pyplot as plt

fig, axes = plt.subplots(6,3,figsize=(10,20))

sns.scatterplot(data = X_mms_embedded_0, x = '0', y = '1', hue = y, ax=axes[0][0])
axes[0][0].set_title('T-SNE MinMax 5,eucl')
sns.scatterplot(data = X_sts_embedded_0, x = '0', y = '1', hue = y, ax=axes[0][1])
axes[0][1].set_title('T-SNE Standart 5,eucl')
sns.scatterplot(data = X_rbs_embedded_0, x = '0', y = '1', hue = y, ax=axes[0][2])
axes[0][2].set_title('T-SNE Robust 5,eucl')

sns.scatterplot(data = X_mms_embedded_1, x = '0', y = '1', hue = y,ax=axes[1][0])
axes[1][0].set_title('T-SNE MinMax 30,eucl')
sns.scatterplot(data = X_sts_embedded_1, x = '0', y = '1', hue = y,ax=axes[1][1])
axes[1][1].set_title('T-SNE Standart 30,eucl')
sns.scatterplot(data = X_rbs_embedded_1, x = '0', y = '1', hue = y,ax=axes[1][2])
axes[1][2].set_title('T-SNE Robust 30,eucl')

sns.scatterplot(data = X_mms_embedded_2, x = '0', y = '1', hue = y,ax=axes[2][0])
axes[2][0].set_title('T-SNE MinMax 60,eucl')
sns.scatterplot(data = X_sts_embedded_2, x = '0', y = '1', hue = y,ax=axes[2][1])
axes[2][1].set_title('T-SNE Standart 60,eucl')
sns.scatterplot(data = X_rbs_embedded_2, x = '0', y = '1', hue = y,ax=axes[2][2])
axes[2][2].set_title('T-SNE Robust 60,eucl')

sns.scatterplot(data = X_mms_embedded_3, x = '0', y = '1', hue = y,ax=axes[3][0])
axes[3][0].set_title('T-SNE MinMax 30,cos')
sns.scatterplot(data = X_sts_embedded_3, x = '0', y = '1', hue = y,ax=axes[3][1])
axes[3][1].set_title('T-SNE Standart 30,cos')
sns.scatterplot(data = X_rbs_embedded_3, x = '0', y = '1', hue = y,ax=axes[3][2])
axes[3][2].set_title('T-SNE Robust 30,cos')

sns.scatterplot(data = X_mms_embedded_4, x = '0', y = '1', hue = y,ax=axes[4][0])
axes[4][0].set_title('T-SNE MinMax 30,mh')
sns.scatterplot(data = X_sts_embedded_4, x = '0', y = '1', hue = y,ax=axes[4][1])
axes[4][1].set_title('T-SNE Standart 30,mh')
sns.scatterplot(data = X_rbs_embedded_4, x = '0', y = '1', hue = y,ax=axes[4][2])
axes[4][2].set_title('T-SNE Robust 30,mh')

sns.scatterplot(data = X_mms_embedded_5, x = '0', y = '1', hue = y,ax=axes[5][0])
axes[5][0].set_title('T-SNE MinMax 30,corr')
sns.scatterplot(data = X_sts_embedded_5, x = '0', y = '1', hue = y,ax=axes[5][1])
axes[5][1].set_title('T-SNE Standart 30,corr')
sns.scatterplot(data = X_rbs_embedded_5, x = '0', y = '1', hue = y,ax=axes[5][2])
axes[5][2].set_title('T-SNE Robust 30,corr')

for ax_row in axes:
    for ax in ax_row:
        ax.set_xlabel("")
        ax.set_ylabel("")
plt.tight_layout()
plt.show()

"""#UMAP"""

from umap import UMAP

"""##fit"""

X_mms_embedded_0 = pd.DataFrame(UMAP(n_neighbors=5, min_dist=0.0, metric='euclidean').fit_transform(X_mms))
X_sts_embedded_0 = pd.DataFrame(UMAP(n_neighbors=5, min_dist=0.0, metric='euclidean').fit_transform(X_sts))
X_rbs_embedded_0 = pd.DataFrame(UMAP(n_neighbors=5, min_dist=0.0, metric='euclidean').fit_transform(X_rbs))

X_mms_embedded_0.columns = ['0', '1']
X_sts_embedded_0.columns = ['0', '1']
X_rbs_embedded_0.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_0, y_clean, 'UMAP', 'MinMax',   'k=5, md=0.0, eucl')
eval_embedding(X_sts, X_sts_embedded_0, y_clean, 'UMAP', 'Standard', 'k=5, md=0.0, eucl')
eval_embedding(X_rbs, X_rbs_embedded_0, y_clean, 'UMAP', 'Robust',   'k=5, md=0.0, eucl')

X_mms_embedded_1 = pd.DataFrame(UMAP().fit_transform(X_mms))
X_sts_embedded_1 = pd.DataFrame(UMAP().fit_transform(X_sts))
X_rbs_embedded_1 = pd.DataFrame(UMAP().fit_transform(X_rbs))
#n_neighbors=15, min_dist=0.1, metric='euclidean'

X_mms_embedded_1.columns = ['0', '1']
X_sts_embedded_1.columns = ['0', '1']
X_rbs_embedded_1.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_1, y_clean, 'UMAP', 'MinMax',   'k=15, md=0.1, eucl')
eval_embedding(X_sts, X_sts_embedded_1, y_clean, 'UMAP', 'Standard', 'k=15, md=0.1, eucl')
eval_embedding(X_rbs, X_rbs_embedded_1, y_clean, 'UMAP', 'Robust',   'k=15, md=0.1, eucl')

X_mms_embedded_2 = pd.DataFrame(UMAP(n_neighbors=50, min_dist=0.3, metric='euclidean').fit_transform(X_mms))
X_sts_embedded_2 = pd.DataFrame(UMAP(n_neighbors=50, min_dist=0.3, metric='euclidean').fit_transform(X_sts))
X_rbs_embedded_2 = pd.DataFrame(UMAP(n_neighbors=50, min_dist=0.3, metric='euclidean').fit_transform(X_rbs))

X_mms_embedded_2.columns = ['0', '1']
X_sts_embedded_2.columns = ['0', '1']
X_rbs_embedded_2.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_2, y_clean, 'UMAP', 'MinMax',   'k=50, md=0.3, eucl')
eval_embedding(X_sts, X_sts_embedded_2, y_clean, 'UMAP', 'Standard', 'k=50, md=0.3, eucl')
eval_embedding(X_rbs, X_rbs_embedded_2, y_clean, 'UMAP', 'Robust',   'k=50, md=0.3, eucl')

X_mms_embedded_3 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='cosine').fit_transform(X_mms))
X_sts_embedded_3 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='cosine').fit_transform(X_sts))
X_rbs_embedded_3 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='cosine').fit_transform(X_rbs))

X_mms_embedded_3.columns = ['0', '1']
X_sts_embedded_3.columns = ['0', '1']
X_rbs_embedded_3.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_3, y_clean, 'UMAP', 'MinMax',   'k=15, md=0.1, cos')
eval_embedding(X_sts, X_sts_embedded_3, y_clean, 'UMAP', 'Standard', 'k=15, md=0.1, cos')
eval_embedding(X_rbs, X_rbs_embedded_3, y_clean, 'UMAP', 'Robust',   'k=15, md=0.1, cos')

X_mms_embedded_4 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='manhattan').fit_transform(X_mms))
X_sts_embedded_4 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='manhattan').fit_transform(X_sts))
X_rbs_embedded_4 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='manhattan').fit_transform(X_rbs))

X_mms_embedded_4.columns = ['0', '1']
X_sts_embedded_4.columns = ['0', '1']
X_rbs_embedded_4.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_4, y_clean, 'UMAP', 'MinMax',   'k=15, md=0.1, mh')
eval_embedding(X_sts, X_sts_embedded_4, y_clean, 'UMAP', 'Standard', 'k=15, md=0.1, mh')
eval_embedding(X_rbs, X_rbs_embedded_4, y_clean, 'UMAP', 'Robust',   'k=15, md=0.1, mh')

X_mms_embedded_5 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='correlation').fit_transform(X_mms))
X_sts_embedded_5 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='correlation').fit_transform(X_sts))
X_rbs_embedded_5 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='correlation').fit_transform(X_rbs))

X_mms_embedded_5.columns = ['0', '1']
X_sts_embedded_5.columns = ['0', '1']
X_rbs_embedded_5.columns = ['0', '1']

eval_embedding(X_mms, X_mms_embedded_5, y_clean, 'UMAP', 'MinMax',   'k=15, md=0.1, corr')
eval_embedding(X_sts, X_sts_embedded_5, y_clean, 'UMAP', 'Standard', 'k=15, md=0.1, corr')
eval_embedding(X_rbs, X_rbs_embedded_5, y_clean, 'UMAP', 'Robust',   'k=15, md=0.1, corr')

"""##visualization"""

import seaborn as sns
import matplotlib.pyplot as plt

fig, axes = plt.subplots(6,3,figsize=(10,20))

sns.scatterplot(data = X_mms_embedded_0, x = '0', y = '1', hue = y,ax=axes[0][0])
axes[0][0].set_title('UMAP MinMax 5 0.0 eu')
sns.scatterplot(data = X_sts_embedded_0, x = '0', y = '1', hue = y,ax=axes[0][1])
axes[0][1].set_title('UMAP Standart 5 0.0 eu')
sns.scatterplot(data = X_rbs_embedded_0, x = '0', y = '1', hue = y,ax=axes[0][2])
axes[0][2].set_title('UMAP Robust 5 0.0 eu')

sns.scatterplot(data = X_mms_embedded_1, x = '0', y = '1', hue = y,ax=axes[1][0])
axes[1][0].set_title('UMAP MinMax 15 0.1 eu')
sns.scatterplot(data = X_sts_embedded_1, x = '0', y = '1', hue = y,ax=axes[1][1])
axes[1][1].set_title('UMAP Standart 15 0.1 eu')
sns.scatterplot(data = X_rbs_embedded_1, x = '0', y = '1', hue = y,ax=axes[1][2])
axes[1][2].set_title('UMAP Robust 15 0.1 eu')

sns.scatterplot(data = X_mms_embedded_2, x = '0', y = '1', hue = y,ax=axes[2][0])
axes[2][0].set_title('UMAP MinMax 50 0.3 eu')
sns.scatterplot(data = X_sts_embedded_2, x = '0', y = '1', hue = y,ax=axes[2][1])
axes[2][1].set_title('UMAP Standart 50 0.3 eu')
sns.scatterplot(data = X_rbs_embedded_2, x = '0', y = '1', hue = y,ax=axes[2][2])
axes[2][2].set_title('UMAP Robust 50 0.3 eu')

sns.scatterplot(data = X_mms_embedded_3, x = '0', y = '1', hue = y,ax=axes[3][0])
axes[3][0].set_title('UMAP MinMax 15 0.1 cos')
sns.scatterplot(data = X_sts_embedded_3, x = '0', y = '1', hue = y,ax=axes[3][1])
axes[3][1].set_title('UMAP Standart 15 0.1 cos')
sns.scatterplot(data = X_rbs_embedded_3, x = '0', y = '1', hue = y,ax=axes[3][2])
axes[3][2].set_title('UMAP Robust 15 0.1 cos')

sns.scatterplot(data = X_mms_embedded_4, x = '0', y = '1', hue = y,ax=axes[4][0])
axes[4][0].set_title('UMAP MinMax 15 0.1 mh')
sns.scatterplot(data = X_sts_embedded_4, x = '0', y = '1', hue = y,ax=axes[4][1])
axes[4][1].set_title('UMAP Standart 15 0.1 mh')
sns.scatterplot(data = X_rbs_embedded_4, x = '0', y = '1', hue = y,ax=axes[4][2])
axes[4][2].set_title('UMAP Robust 15 0.1 mh')

sns.scatterplot(data = X_mms_embedded_5, x = '0', y = '1', hue = y,ax=axes[5][0])
axes[5][0].set_title('UMAP MinMax 15 0.1 corr')
sns.scatterplot(data = X_sts_embedded_5, x = '0', y = '1', hue = y,ax=axes[5][1])
axes[5][1].set_title('UMAP Standart 15 0.1 corr')
sns.scatterplot(data = X_rbs_embedded_5, x = '0', y = '1', hue = y,ax=axes[5][2])
axes[5][2].set_title('UMAP Robust 15 0.1 corr')

for ax_row in axes:
    for ax in ax_row:
        ax.set_xlabel("")
        ax.set_ylabel("")
plt.tight_layout()
plt.show()

"""#TriMap"""

#pip install trimap

from trimap import TRIMAP

trimap_cfgs = [
    dict(n_inliers=5,  n_outliers=5,  n_random=5),
    dict(n_inliers=10, n_outliers=5,  n_random=5), #default
    dict(n_inliers=20, n_outliers=10, n_random=5),
    dict(n_inliers=30, n_outliers=10, n_random=10),
    dict(n_inliers=15, n_outliers=15, n_random=5),
    dict(n_inliers=25, n_outliers=5,  n_random=15),
]

datasets = {
    "MinMax":   X_mms.to_numpy(),
    "Standart": X_sts.to_numpy(),
    "Robust":   X_rbs.to_numpy(),
}

emb = []
for cfg in trimap_cfgs:
    row = []
    for name, X in datasets.items():
        Y = TRIMAP(**cfg).fit_transform(X)
        df = pd.DataFrame(Y, columns=['0','1'])
        #eval_embedding(pd.DataFrame(datasets[name], index=X_clean.index),
        #       df, y_clean, 'TriMAP', name,
        #       f"in{cfg['n_inliers']}/out{cfg['n_outliers']}/rnd{cfg['n_random']}")
        title = f"TriMAP {name} in{cfg['n_inliers']} out{cfg['n_outliers']} rnd{cfg['n_random']}"
        row.append((title, df, name))
    emb.append(row)

fig, axes = plt.subplots(len(trimap_cfgs), len(datasets), figsize=(10, 20))
colors = {'MinMax':'r', 'Standart':'y', 'Robust':'g'}

for r, row in enumerate(emb):
    for c, (title, df, name) in enumerate(row):
        ax = axes[r][c]
        sns.scatterplot(data=df, x='0', y='1', s=12, alpha=0.9, hue = y, ax=ax)
        ax.set_title(title)
        ax.set_xlabel(""); ax.set_ylabel("")
        ax.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)

plt.tight_layout()
plt.show()

"""#PaCMAP"""

#pip install pacmap

import pacmap

pacmap_cfgs = [
    dict(n_neighbors=10, MN_ratio=0.5, FP_ratio=2.0, num_iters=450, apply_pca=True), #default
    dict(n_neighbors=30, MN_ratio=0.5, FP_ratio=2.0, num_iters=600, apply_pca=True),
    dict(n_neighbors=15, MN_ratio=0.25, FP_ratio=2.0, num_iters=500, apply_pca=True),
    dict(n_neighbors=15, MN_ratio=0.5, FP_ratio=3.0, num_iters=500, apply_pca=True),
    dict(n_neighbors=20, MN_ratio=0.5, FP_ratio=2.0, num_iters=500, apply_pca=True),
    dict(n_neighbors=20, MN_ratio=0.5, FP_ratio=2.0, num_iters=500, apply_pca=True),
]

datasets = {
    "MinMax":   X_mms.to_numpy(),
    "Standart": X_sts.to_numpy(),
    "Robust":   X_rbs.to_numpy(),
}

emb = []
for cfg in pacmap_cfgs:
    row = []
    for name, X in datasets.items():
        model = pacmap.PaCMAP(**cfg)
        Y = model.fit_transform(X, init="pca")
        df = pd.DataFrame(Y, columns=['0','1'])
        #eval_embedding(pd.DataFrame(datasets[name], index=X_clean.index),
        #       df, y_clean, 'PaCMAP', name,
        #       f"k={cfg['n_neighbors']}, MN={cfg['MN_ratio']}, FP={cfg['FP_ratio']}")
        title = f"PaCMAP {name} k{cfg['n_neighbors']} MN{cfg['MN_ratio']} FP{cfg['FP_ratio']}"
        row.append((title, df, name))
    emb.append(row)

fig, axes = plt.subplots(len(pacmap_cfgs), len(datasets), figsize=(10, 20))
colors = {'MinMax':'r', 'Standart':'y', 'Robust':'g'}

for r, row in enumerate(emb):
    for c, (title, df, name) in enumerate(row):
        ax = axes[r][c]
        sns.scatterplot(data=df, x='0', y='1', s=12, alpha=0.9, hue = y, ax=ax)
        ax.set_title(title)
        ax.set_xlabel(""); ax.set_ylabel("")
        ax.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)

plt.tight_layout()
plt.show()

"""#Results"""

res_df = pd.DataFrame(results)

summary = (res_df
           .groupby(['method','scaler'])[['trustworthiness','silhouette','ari','nmi']]
           .mean().round(3)
           .sort_values(['method','trustworthiness'], ascending=[True, False]))
print("\nСредние метрики по методу и скейлеру:\n", summary)

best_tw  = res_df.loc[res_df.groupby('method')['trustworthiness'].idxmax(),
                      ['method','scaler','setting','trustworthiness']]
best_sil = res_df.loc[res_df.groupby('method')['silhouette'].idxmax(),
                      ['method','scaler','setting','silhouette']]
best_ari = res_df.loc[res_df.groupby('method')['ari'].idxmax(),
                      ['method','scaler','setting','ari']]
best_nmi = res_df.loc[res_df.groupby('method')['nmi'].idxmax(),
                      ['method','scaler','setting','nmi']]

res_df = pd.DataFrame(results)

summary = (res_df
           .groupby(['method','scaler'])[['trustworthiness','silhouette','ari','nmi']]
           .mean().round(3)
           .sort_values(['method','trustworthiness'], ascending=[True, False]))
print("\nСредние метрики по методу и скейлеру:\n", summary)

best_tw  = res_df.loc[res_df.groupby('method')['trustworthiness'].idxmax(),
                      ['method','scaler','setting','trustworthiness']]
best_sil = res_df.loc[res_df.groupby('method')['silhouette'].idxmax(),
                      ['method','scaler','setting','silhouette']]
best_ari = res_df.loc[res_df.groupby('method')['ari'].idxmax(),
                      ['method','scaler','setting','ari']]
best_nmi = res_df.loc[res_df.groupby('method')['nmi'].idxmax(),
                      ['method','scaler','setting','nmi']]

print("\nЛучшие по Trustworthiness:\n", best_tw.to_string(index=False))
print("\nЛучшие по Silhouette:\n",      best_sil.to_string(index=False))
print("\nЛучшие по ARI:\n",             best_ari.to_string(index=False))
print("\nЛучшие по NMI:\n",             best_nmi.to_string(index=False))

"""#mammoth DATA"""

import pandas as pd

m = pd.read_csv('mammoth.csv')
m.head(5)

m.describe()

m.isna().sum()

m = m.sample(n=15000, random_state=42)

"""#mammoth Scalers preprocessing"""

from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler

import pandas as pd

min_max_scaler = MinMaxScaler()
standart_scaler = StandardScaler()
robust_scaler = RobustScaler()

X_mms = min_max_scaler.fit_transform(m)
X_sts = standart_scaler.fit_transform(m)
X_rbs = robust_scaler.fit_transform(m)

X_mms = pd.DataFrame(X_mms)
X_sts = pd.DataFrame(X_sts)
X_rbs = pd.DataFrame(X_rbs)

print(X_mms.shape, X_sts.shape, X_rbs.shape)

X_mms.head(5)

X_sts.head(5)

X_rbs.head(5)

"""#Scalers comparison"""

import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib import cm
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import minmax_scale
from sklearn.preprocessing import MaxAbsScaler
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import QuantileTransformer
from sklearn.preprocessing import PowerTransformer
from sklearn.datasets import fetch_california_housing

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.cm as cm

from sklearn.preprocessing import (
    MinMaxScaler, StandardScaler, RobustScaler, minmax_scale
)

min_max_scaler = MinMaxScaler()
standart_scaler = StandardScaler()
robust_scaler = RobustScaler()

X_mms = min_max_scaler.fit_transform(m.iloc[:, :2])
X_sts = standart_scaler.fit_transform(m.iloc[:, :2])
X_rbs = robust_scaler.fit_transform(m.iloc[:, :2])

X_mms = pd.DataFrame(X_mms, columns=["f0", "f1"])
X_sts = pd.DataFrame(X_sts, columns=["f0", "f1"])
X_rbs = pd.DataFrame(X_rbs, columns=["f0", "f1"])

color_source = m.iloc[:, 0].values
y = minmax_scale(color_source)
cmap = getattr(cm, 'plasma_r', cm.hot_r)

def create_axes(title, figsize=(14, 6)):
    fig = plt.figure(figsize=figsize)
    fig.suptitle(title)
    left, width = 0.07, 0.28
    bottom, height = 0.12, 0.72
    bottom_h = height + 0.14
    left_h = left + width + 0.02
    rect_scatter = [left, bottom, width, height]
    rect_histx = [left, bottom_h, width, 0.08]
    rect_histy = [left_h, bottom, 0.04, height]
    ax_scatter = plt.axes(rect_scatter)
    ax_histx = plt.axes(rect_histx)
    ax_histy = plt.axes(rect_histy)

    left2 = left + width + 0.18
    left_h2 = left2 + width + 0.02
    rect_scatter_zoom = [left2, bottom, width, height]
    rect_histx_zoom = [left2, bottom_h, width, 0.08]
    rect_histy_zoom = [left_h2, bottom, 0.04, height]
    ax_scatter_zoom = plt.axes(rect_scatter_zoom)
    ax_histx_zoom = plt.axes(rect_histx_zoom)
    ax_histy_zoom = plt.axes(rect_histy_zoom)

    left_cb = left2 + width + 0.12
    rect_colorbar = [left_cb, bottom, 0.02, height]
    ax_colorbar = plt.axes(rect_colorbar)

    return ((ax_scatter, ax_histy, ax_histx),
            (ax_scatter_zoom, ax_histy_zoom, ax_histx_zoom),
            ax_colorbar)

def plot_distribution(axes, X_np, y_vals, hist_nbins=50, title="",
                      x0_label="", x1_label=""):
    ax, hist_X1, hist_X0 = axes
    ax.set_title(title)
    ax.set_xlabel(x0_label)
    ax.set_ylabel(x1_label)

    colors = cmap(y_vals)
    ax.scatter(X_np[:, 0], X_np[:, 1], alpha=0.6, marker='o', s=14, lw=0, c=colors)

    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()
    ax.spines['left'].set_position(('outward', 6))
    ax.spines['bottom'].set_position(('outward', 6))
    hist_X1.set_ylim(ax.get_ylim())
    hist_X1.hist(X_np[:, 1], bins=hist_nbins, orientation='horizontal', color='grey', ec='grey')
    hist_X1.axis('off')

    hist_X0.set_xlim(ax.get_xlim())
    hist_X0.hist(X_np[:, 0], bins=hist_nbins, orientation='vertical', color='grey', ec='grey')
    hist_X0.axis('off')

def make_plot_for_X(title, X_df, y_vals, show=True):
    X = np.asarray(X_df.iloc[:, :2])
    ax_zoom_out, ax_zoom_in, ax_colorbar = create_axes(title)
    axarr = (ax_zoom_out, ax_zoom_in)

    plot_distribution(axarr[0], X, y_vals, hist_nbins=200,
                      x0_label="Feature 0", x1_label="Feature 1",
                      title="Full data")

    zoom_in_percentile_range = (0, 99)
    cutoffs_X0 = np.percentile(X[:, 0], zoom_in_percentile_range)
    cutoffs_X1 = np.percentile(X[:, 1], zoom_in_percentile_range)
    non_outliers_mask = (
        np.all(X > [cutoffs_X0[0], cutoffs_X1[0]], axis=1) &
        np.all(X < [cutoffs_X0[1], cutoffs_X1[1]], axis=1)
    )
    X_zoom = X[non_outliers_mask]
    y_zoom = y_vals[non_outliers_mask]
    plot_distribution(axarr[1], X_zoom, y_zoom, hist_nbins=50,
                      x0_label="Feature 0", x1_label="Feature 1",
                      title="Zoom-in (0th-99th pct)")

    norm = mpl.colors.Normalize(vmin=0.0, vmax=1.0)
    mpl.colorbar.ColorbarBase(ax_colorbar, cmap=cmap, norm=norm, orientation='vertical',
                              label='Color mapping (0..1)')
    if show:
        plt.show()

distributions = [
    ('Data after MinMax scaling', X_mms),
    ('Data after Standard scaling', X_sts),
    ('Data after Robust scaling', X_rbs),
]

for title, Xdf in distributions:
    make_plot_for_X(title, Xdf, y)

"""#T-SNE"""

import numpy as np
from sklearn.manifold import TSNE

"""##fit"""

X_mms_embedded_0 = pd.DataFrame(TSNE(perplexity=5).fit_transform(X_mms))
X_sts_embedded_0 = pd.DataFrame(TSNE(perplexity=5).fit_transform(X_sts))
X_rbs_embedded_0 = pd.DataFrame(TSNE(perplexity=5).fit_transform(X_rbs))

X_mms_embedded_0.columns = ['0', '1']
X_sts_embedded_0.columns = ['0', '1']
X_rbs_embedded_0.columns = ['0', '1']

X_mms_embedded_1 = pd.DataFrame(TSNE().fit_transform(X_mms))
X_sts_embedded_1 = pd.DataFrame(TSNE().fit_transform(X_sts))
X_rbs_embedded_1 = pd.DataFrame(TSNE().fit_transform(X_rbs))

X_mms_embedded_1.columns = ['0', '1']
X_sts_embedded_1.columns = ['0', '1']
X_rbs_embedded_1.columns = ['0', '1']

X_mms_embedded_2 = pd.DataFrame(TSNE(perplexity=60).fit_transform(X_mms))
X_sts_embedded_2 = pd.DataFrame(TSNE(perplexity=60).fit_transform(X_sts))
X_rbs_embedded_2 = pd.DataFrame(TSNE(perplexity=60).fit_transform(X_rbs))

X_mms_embedded_2.columns = ['0', '1']
X_sts_embedded_2.columns = ['0', '1']
X_rbs_embedded_2.columns = ['0', '1']

X_mms_embedded_3 = pd.DataFrame(TSNE(metric='cosine').fit_transform(X_mms))
X_sts_embedded_3 = pd.DataFrame(TSNE(metric='cosine').fit_transform(X_sts))
X_rbs_embedded_3 = pd.DataFrame(TSNE(metric='cosine').fit_transform(X_rbs))

X_mms_embedded_3.columns = ['0', '1']
X_sts_embedded_3.columns = ['0', '1']
X_rbs_embedded_3.columns = ['0', '1']

X_mms_embedded_4 = pd.DataFrame(TSNE(metric='manhattan').fit_transform(X_mms))
X_sts_embedded_4 = pd.DataFrame(TSNE(metric='manhattan').fit_transform(X_sts))
X_rbs_embedded_4 = pd.DataFrame(TSNE(metric='manhattan').fit_transform(X_rbs))

X_mms_embedded_4.columns = ['0', '1']
X_sts_embedded_4.columns = ['0', '1']
X_rbs_embedded_4.columns = ['0', '1']

X_mms_embedded_5 = pd.DataFrame(TSNE(metric='correlation').fit_transform(X_mms))
X_sts_embedded_5 = pd.DataFrame(TSNE(metric='correlation').fit_transform(X_sts))
X_rbs_embedded_5 = pd.DataFrame(TSNE(metric='correlation').fit_transform(X_rbs))

X_mms_embedded_5.columns = ['0', '1']
X_sts_embedded_5.columns = ['0', '1']
X_rbs_embedded_5.columns = ['0', '1']

"""##visualization"""

import seaborn as sns
import matplotlib.pyplot as plt

fig, axes = plt.subplots(6,3,figsize=(10,20))

sns.scatterplot(data = X_mms_embedded_0, x = '0', y = '1', color = 'r',ax=axes[0][0])
axes[0][0].set_title('T-SNE MinMax 5,eucl')
sns.scatterplot(data = X_sts_embedded_0, x = '0', y = '1', color = 'y',ax=axes[0][1])
axes[0][1].set_title('T-SNE Standart 5,eucl')
sns.scatterplot(data = X_rbs_embedded_0, x = '0', y = '1', color = 'g',ax=axes[0][2])
axes[0][2].set_title('T-SNE Robust 5,eucl')

sns.scatterplot(data = X_mms_embedded_1, x = '0', y = '1', color = 'r',ax=axes[1][0])
axes[1][0].set_title('T-SNE MinMax 30,eucl')
sns.scatterplot(data = X_sts_embedded_1, x = '0', y = '1', color = 'y',ax=axes[1][1])
axes[1][1].set_title('T-SNE Standart 30,eucl')
sns.scatterplot(data = X_rbs_embedded_1, x = '0', y = '1', color = 'g',ax=axes[1][2])
axes[1][2].set_title('T-SNE Robust 30,eucl')

sns.scatterplot(data = X_mms_embedded_2, x = '0', y = '1', color = 'r',ax=axes[2][0])
axes[2][0].set_title('T-SNE MinMax 60,eucl')
sns.scatterplot(data = X_sts_embedded_2, x = '0', y = '1', color = 'y',ax=axes[2][1])
axes[2][1].set_title('T-SNE Standart 60,eucl')
sns.scatterplot(data = X_rbs_embedded_2, x = '0', y = '1', color = 'g',ax=axes[2][2])
axes[2][2].set_title('T-SNE Robust 60,eucl')

sns.scatterplot(data = X_mms_embedded_3, x = '0', y = '1', color = 'r',ax=axes[3][0])
axes[3][0].set_title('T-SNE MinMax 30,cos')
sns.scatterplot(data = X_sts_embedded_3, x = '0', y = '1', color = 'y',ax=axes[3][1])
axes[3][1].set_title('T-SNE Standart 30,cos')
sns.scatterplot(data = X_rbs_embedded_3, x = '0', y = '1', color = 'g',ax=axes[3][2])
axes[3][2].set_title('T-SNE Robust 30,cos')

sns.scatterplot(data = X_mms_embedded_4, x = '0', y = '1', color = 'r',ax=axes[4][0])
axes[4][0].set_title('T-SNE MinMax 30,mh')
sns.scatterplot(data = X_sts_embedded_4, x = '0', y = '1', color = 'y',ax=axes[4][1])
axes[4][1].set_title('T-SNE Standart 30,mh')
sns.scatterplot(data = X_rbs_embedded_4, x = '0', y = '1', color = 'g',ax=axes[4][2])
axes[4][2].set_title('T-SNE Robust 30,mh')

sns.scatterplot(data = X_mms_embedded_5, x = '0', y = '1', color = 'r',ax=axes[5][0])
axes[5][0].set_title('T-SNE MinMax 30,corr')
sns.scatterplot(data = X_sts_embedded_5, x = '0', y = '1', color = 'y',ax=axes[5][1])
axes[5][1].set_title('T-SNE Standart 30,corr')
sns.scatterplot(data = X_rbs_embedded_5, x = '0', y = '1', color = 'g',ax=axes[5][2])
axes[5][2].set_title('T-SNE Robust 30,corr')

for ax_row in axes:
    for ax in ax_row:
        ax.set_xlabel("")
        ax.set_ylabel("")
plt.tight_layout()
plt.show()

"""#UMAP"""

from umap import UMAP

"""##fit"""

X_mms_embedded_0 = pd.DataFrame(UMAP(n_neighbors=5, min_dist=0.0, metric='euclidean').fit_transform(X_mms))
X_sts_embedded_0 = pd.DataFrame(UMAP(n_neighbors=5, min_dist=0.0, metric='euclidean').fit_transform(X_sts))
X_rbs_embedded_0 = pd.DataFrame(UMAP(n_neighbors=5, min_dist=0.0, metric='euclidean').fit_transform(X_rbs))

X_mms_embedded_0.columns = ['0', '1']
X_sts_embedded_0.columns = ['0', '1']
X_rbs_embedded_0.columns = ['0', '1']

X_mms_embedded_1 = pd.DataFrame(UMAP().fit_transform(X_mms))
X_sts_embedded_1 = pd.DataFrame(UMAP().fit_transform(X_sts))
X_rbs_embedded_1 = pd.DataFrame(UMAP().fit_transform(X_rbs))
#n_neighbors=15, min_dist=0.1, metric='euclidean'

X_mms_embedded_1.columns = ['0', '1']
X_sts_embedded_1.columns = ['0', '1']
X_rbs_embedded_1.columns = ['0', '1']

X_mms_embedded_2 = pd.DataFrame(UMAP(n_neighbors=50, min_dist=0.3, metric='euclidean').fit_transform(X_mms))
X_sts_embedded_2 = pd.DataFrame(UMAP(n_neighbors=50, min_dist=0.3, metric='euclidean').fit_transform(X_sts))
X_rbs_embedded_2 = pd.DataFrame(UMAP(n_neighbors=50, min_dist=0.3, metric='euclidean').fit_transform(X_rbs))

X_mms_embedded_2.columns = ['0', '1']
X_sts_embedded_2.columns = ['0', '1']
X_rbs_embedded_2.columns = ['0', '1']

X_mms_embedded_3 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='cosine').fit_transform(X_mms))
X_sts_embedded_3 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='cosine').fit_transform(X_sts))
X_rbs_embedded_3 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='cosine').fit_transform(X_rbs))

X_mms_embedded_3.columns = ['0', '1']
X_sts_embedded_3.columns = ['0', '1']
X_rbs_embedded_3.columns = ['0', '1']

X_mms_embedded_4 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='manhattan').fit_transform(X_mms))
X_sts_embedded_4 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='manhattan').fit_transform(X_sts))
X_rbs_embedded_4 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='manhattan').fit_transform(X_rbs))

X_mms_embedded_4.columns = ['0', '1']
X_sts_embedded_4.columns = ['0', '1']
X_rbs_embedded_4.columns = ['0', '1']

X_mms_embedded_5 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='correlation').fit_transform(X_mms))
X_sts_embedded_5 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='correlation').fit_transform(X_sts))
X_rbs_embedded_5 = pd.DataFrame(UMAP(n_neighbors=15, min_dist=0.1, metric='correlation').fit_transform(X_rbs))

X_mms_embedded_5.columns = ['0', '1']
X_sts_embedded_5.columns = ['0', '1']
X_rbs_embedded_5.columns = ['0', '1']

"""##visualization"""

import seaborn as sns
import matplotlib.pyplot as plt

fig, axes = plt.subplots(6,3,figsize=(10,20))

sns.scatterplot(data = X_mms_embedded_0, x = '0', y = '1', color = 'r',ax=axes[0][0])
axes[0][0].set_title('UMAP MinMax 5 0.0 eu')
sns.scatterplot(data = X_sts_embedded_0, x = '0', y = '1', color = 'y',ax=axes[0][1])
axes[0][1].set_title('UMAP Standart 5 0.0 eu')
sns.scatterplot(data = X_rbs_embedded_0, x = '0', y = '1', color = 'g',ax=axes[0][2])
axes[0][2].set_title('UMAP Robust 5 0.0 eu')

sns.scatterplot(data = X_mms_embedded_1, x = '0', y = '1', color = 'r',ax=axes[1][0])
axes[1][0].set_title('UMAP MinMax 15 0.1 eu')
sns.scatterplot(data = X_sts_embedded_1, x = '0', y = '1', color = 'y',ax=axes[1][1])
axes[1][1].set_title('UMAP Standart 15 0.1 eu')
sns.scatterplot(data = X_rbs_embedded_1, x = '0', y = '1', color = 'g',ax=axes[1][2])
axes[1][2].set_title('UMAP Robust 15 0.1 eu')

sns.scatterplot(data = X_mms_embedded_2, x = '0', y = '1', color = 'r',ax=axes[2][0])
axes[2][0].set_title('UMAP MinMax 50 0.3 eu')
sns.scatterplot(data = X_sts_embedded_2, x = '0', y = '1', color = 'y',ax=axes[2][1])
axes[2][1].set_title('UMAP Standart 50 0.3 eu')
sns.scatterplot(data = X_rbs_embedded_2, x = '0', y = '1', color = 'g',ax=axes[2][2])
axes[2][2].set_title('UMAP Robust 50 0.3 eu')

sns.scatterplot(data = X_mms_embedded_3, x = '0', y = '1', color = 'r',ax=axes[3][0])
axes[3][0].set_title('UMAP MinMax 15 0.1 cos')
sns.scatterplot(data = X_sts_embedded_3, x = '0', y = '1', color = 'y',ax=axes[3][1])
axes[3][1].set_title('UMAP Standart 15 0.1 cos')
sns.scatterplot(data = X_rbs_embedded_3, x = '0', y = '1', color = 'g',ax=axes[3][2])
axes[3][2].set_title('UMAP Robust 15 0.1 cos')

sns.scatterplot(data = X_mms_embedded_4, x = '0', y = '1', color = 'r',ax=axes[4][0])
axes[4][0].set_title('UMAP MinMax 15 0.1 mh')
sns.scatterplot(data = X_sts_embedded_4, x = '0', y = '1', color = 'y',ax=axes[4][1])
axes[4][1].set_title('UMAP Standart 15 0.1 mh')
sns.scatterplot(data = X_rbs_embedded_4, x = '0', y = '1', color = 'g',ax=axes[4][2])
axes[4][2].set_title('UMAP Robust 15 0.1 mh')

sns.scatterplot(data = X_mms_embedded_5, x = '0', y = '1', color = 'r',ax=axes[5][0])
axes[5][0].set_title('UMAP MinMax 15 0.1 corr')
sns.scatterplot(data = X_sts_embedded_5, x = '0', y = '1', color = 'y',ax=axes[5][1])
axes[5][1].set_title('UMAP Standart 15 0.1 corr')
sns.scatterplot(data = X_rbs_embedded_5, x = '0', y = '1', color = 'g',ax=axes[5][2])
axes[5][2].set_title('UMAP Robust 15 0.1 corr')

for ax_row in axes:
    for ax in ax_row:
        ax.set_xlabel("")
        ax.set_ylabel("")
plt.tight_layout()
plt.show()

"""#TriMap"""

#pip install trimap

from trimap import TRIMAP

trimap_cfgs = [
    dict(n_inliers=5,  n_outliers=5,  n_random=5),
    dict(n_inliers=10, n_outliers=5,  n_random=5), #default
    dict(n_inliers=20, n_outliers=10, n_random=5),
    dict(n_inliers=30, n_outliers=10, n_random=10),
    dict(n_inliers=15, n_outliers=15, n_random=5),
    dict(n_inliers=25, n_outliers=5,  n_random=15),
]

datasets = {
    "MinMax":   X_mms.to_numpy(),
    "Standart": X_sts.to_numpy(),
    "Robust":   X_rbs.to_numpy(),
}

emb = []
for cfg in trimap_cfgs:
    row = []
    for name, X in datasets.items():
        Y = TRIMAP(**cfg).fit_transform(X)
        df = pd.DataFrame(Y, columns=['0','1'])
        title = f"TriMAP {name} in{cfg['n_inliers']} out{cfg['n_outliers']} rnd{cfg['n_random']}"
        row.append((title, df, name))
    emb.append(row)

fig, axes = plt.subplots(len(trimap_cfgs), len(datasets), figsize=(10, 20))
colors = {'MinMax':'r', 'Standart':'y', 'Robust':'g'}

for r, row in enumerate(emb):
    for c, (title, df, name) in enumerate(row):
        ax = axes[r][c]
        sns.scatterplot(data=df, x='0', y='1', s=12, alpha=0.9, color=colors[name], ax=ax)
        ax.set_title(title)
        ax.set_xlabel(""); ax.set_ylabel("")
        ax.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)

plt.tight_layout()
plt.show()

"""#PaCMAP"""

#pip install pacmap

import pacmap

import matplotlib.pyplot as plt
import seaborn as sns

pacmap_cfgs = [
    dict(n_neighbors=10, MN_ratio=0.5, FP_ratio=2.0, num_iters=450, apply_pca=True), #default
    dict(n_neighbors=30, MN_ratio=0.5, FP_ratio=2.0, num_iters=600, apply_pca=True),
    dict(n_neighbors=15, MN_ratio=0.25, FP_ratio=2.0, num_iters=500, apply_pca=True),
    dict(n_neighbors=15, MN_ratio=0.5, FP_ratio=3.0, num_iters=500, apply_pca=True),
    dict(n_neighbors=20, MN_ratio=0.5, FP_ratio=2.0, num_iters=500, apply_pca=True),
    dict(n_neighbors=20, MN_ratio=0.5, FP_ratio=2.0, num_iters=500, apply_pca=True),
]

datasets = {
    "MinMax":   X_mms.to_numpy(),
    "Standart": X_sts.to_numpy(),
    "Robust":   X_rbs.to_numpy(),
}

emb = []
for cfg in pacmap_cfgs:
    row = []
    for name, X in datasets.items():
        model = pacmap.PaCMAP(**cfg)
        Y = model.fit_transform(X, init="pca")
        df = pd.DataFrame(Y, columns=['0','1'])
        title = f"PaCMAP {name} k{cfg['n_neighbors']} MN{cfg['MN_ratio']} FP{cfg['FP_ratio']}"
        row.append((title, df, name))
    emb.append(row)

fig, axes = plt.subplots(len(pacmap_cfgs), len(datasets), figsize=(10, 20))
colors = {'MinMax':'r', 'Standart':'y', 'Robust':'g'}

for r, row in enumerate(emb):
    for c, (title, df, name) in enumerate(row):
        ax = axes[r][c]
        sns.scatterplot(data=df, x='0', y='1', s=12, alpha=0.9, color=colors[name], ax=ax)
        ax.set_title(title)
        ax.set_xlabel(""); ax.set_ylabel("")
        ax.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)

plt.tight_layout()
plt.show()

fig, axes = plt.subplots(len(pacmap_cfgs), len(datasets), figsize=(10, 20))
colors = {'MinMax':'r', 'Standart':'y', 'Robust':'g'}

for r, row in enumerate(emb):
    for c, (title, df, name) in enumerate(row):
        ax = axes[r][c]
        sns.scatterplot(data=df, x='0', y='1', s=12, alpha=0.9, color=colors[name], ax=ax)
        ax.set_title(title)
        ax.set_xlabel(""); ax.set_ylabel("")
        ax.tick_params(left=False, bottom=False, labelleft=False, labelbottom=False)

plt.tight_layout()
plt.show()

